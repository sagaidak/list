{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["data","App","useState","setData","useEffect","Promise","resolve","then","res","className","rates","Object","entries","map","name","value","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAAMA,EAAO,CACX,OAAS,EACT,UAAa,WACb,KAAQ,MACR,MAAS,CACP,IAAO,QACP,IAAO,QACP,IAAO,UACP,IAAO,UACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,QACP,IAAO,IACP,IAAO,IACP,IAAO,MACP,IAAO,QACP,IAAO,qBACP,IAAO,SACP,IAAO,QACP,IAAO,OACP,IAAO,UACP,IAAO,EACP,IAAO,QACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,sBACP,IAAO,mBACP,IAAO,SACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,MACP,IAAO,QACP,IAAO,UACP,IAAO,EACP,IAAO,OACP,IAAO,UACP,IAAO,SACP,KAAQ,oBACR,IAAO,QACP,IAAO,OACP,IAAO,SACP,IAAO,QACP,IAAO,SACP,IAAO,mBACP,IAAO,QACP,IAAO,oBACP,IAAO,OACP,IAAO,QACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,QACP,IAAO,WACP,IAAO,QACP,IAAO,UACP,IAAO,OACP,IAAO,SACP,IAAO,QACP,IAAO,SACP,IAAO,OACP,IAAO,WACP,IAAO,MACP,IAAO,OACP,IAAO,WACP,IAAO,QACP,IAAO,SACP,IAAO,UACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,UACP,IAAO,QACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,UACP,IAAO,WACP,IAAO,WACP,IAAO,UACP,IAAO,UACP,IAAO,QACP,IAAO,oBACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,UACP,IAAO,QACP,IAAO,SACP,IAAO,OACP,IAAO,SACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,QACP,IAAO,OACP,IAAO,SACP,IAAO,OACP,IAAO,UACP,IAAO,QACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,UACP,IAAO,OACP,IAAO,WACP,IAAO,OACP,IAAO,QACP,IAAO,SACP,IAAO,QACP,IAAO,UACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,QACP,IAAO,OACP,IAAO,IACP,IAAO,OACP,IAAO,OACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,QACP,IAAO,IACP,IAAO,QACP,IAAO,QACP,IAAO,QACP,IAAO,QACP,IAAO,SACP,IAAO,SACP,IAAO,SACP,IAAO,UACP,IAAO,EACP,IAAO,SACP,IAAO,UACP,IAAO,SACP,IAAO,UACP,IAAO,oBACP,IAAO,qBACP,IAAO,QACP,IAAO,mBACP,IAAO,UACP,IAAO,kBACP,IAAO,SACP,IAAO,QACP,IAAO,W,MC7HIC,MA1Bf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACLF,EADK,KACCG,EADD,KASb,OANAC,qBAAU,WDwJiB,IAAIC,SAAQ,SAACC,GACxCA,EAAQN,MCxJIO,MAAK,SAAAC,GACbL,EAAQK,QAET,IAGD,yBAAKC,UAAU,OACb,yBAAKA,UAAU,OACb,sCAEET,GAAQA,EAAKU,OAASC,OAAOC,QAAQZ,EAAKU,OAAOG,KAAI,YAAoB,IAAD,mBAAjBC,EAAiB,KAAXC,EAAW,KACtE,OAAO,yBAAKN,UAAU,MAAMO,IAAKF,GAC/B,yBAAKL,UAAU,QAAQK,GACvB,yBAAKL,UAAU,SAASM,UCVlBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.43ce442f.chunk.js","sourcesContent":["const data = {\n  \"valid\": true,\n  \"timestamp\": 1582195447,\n  \"base\": \"USD\",\n  \"rates\": {\n    \"AED\": 3.67338,\n    \"AFN\": 77.8079,\n    \"ALL\": 113.23065,\n    \"AMD\": 478.14251,\n    \"ANG\": 1.78845,\n    \"AOA\": 493.9822,\n    \"ARS\": 61.66319,\n    \"AUD\": 1.50684,\n    \"AWG\": 1.8,\n    \"AZN\": 1.7,\n    \"BAM\": 1.811,\n    \"BBD\": 2.01732,\n    \"BCH\": 0.0026295030239284773,\n    \"BDT\": 84.88116,\n    \"BGN\": 1.81119,\n    \"BHD\": 0.37698,\n    \"BIF\": 1883.9902,\n    \"BMD\": 1,\n    \"BND\": 1.39136,\n    \"BOB\": 6.90982,\n    \"BRL\": 4.36582,\n    \"BSD\": 0.99917,\n    \"BTC\": 0.00010430672016906032,\n    \"BTG\": 0.09900990099009901,\n    \"BWP\": 10.99162,\n    \"BZD\": 2.01399,\n    \"CAD\": 1.32493,\n    \"CDF\": 1686.1,\n    \"CHF\": 0.98284,\n    \"CLP\": 796.23,\n    \"CNH\": 7.02971,\n    \"CNY\": 7.029,\n    \"COP\": 3385.67,\n    \"CRC\": 567.00515,\n    \"CUC\": 1,\n    \"CUP\": 0.99899,\n    \"CVE\": 102.10001,\n    \"CZK\": 23.16515,\n    \"DASH\": 0.009672115291614276,\n    \"DJF\": 177.729,\n    \"DKK\": 6.9152,\n    \"DOP\": 53.33415,\n    \"DZD\": 120.936,\n    \"EGP\": 15.59628,\n    \"EOS\": 0.25144581342720645,\n    \"ETB\": 31.8418,\n    \"ETH\": 0.003866976024748646,\n    \"EUR\": 0.92612,\n    \"FJD\": 2.20721,\n    \"GBP\": 0.77471,\n    \"GEL\": 2.82515,\n    \"GHS\": 5.32477,\n    \"GIP\": 0.81292,\n    \"GMD\": 50.8725,\n    \"GNF\": 9519.70895,\n    \"GTQ\": 7.62428,\n    \"GYD\": 208.40372,\n    \"HKD\": 7.7788,\n    \"HNL\": 24.61633,\n    \"HRK\": 6.89836,\n    \"HTG\": 97.52467,\n    \"HUF\": 312.74,\n    \"IDR\": 13810.6405,\n    \"ILS\": 3.433,\n    \"INR\": 71.589,\n    \"IQD\": 1192.91165,\n    \"IRR\": 42107.1,\n    \"ISK\": 127.7165,\n    \"JMD\": 140.87825,\n    \"JOD\": 0.70914,\n    \"JPY\": 111.969,\n    \"KES\": 101.365,\n    \"KGS\": 69.85239,\n    \"KHR\": 4088.4324,\n    \"KMF\": 456.473,\n    \"KRW\": 1204.77,\n    \"KWD\": 0.30657,\n    \"KYD\": 0.83261,\n    \"KZT\": 376.44802,\n    \"LAK\": 8895.31975,\n    \"LBP\": 1510.69955,\n    \"LKR\": 181.84229,\n    \"LRD\": 196.88485,\n    \"LSL\": 14.9805,\n    \"LTC\": 0.014191442560136236,\n    \"LYD\": 1.41237,\n    \"MAD\": 9.73535,\n    \"MDL\": 17.71963,\n    \"MKD\": 57.00696,\n    \"MMK\": 1449.7425,\n    \"MOP\": 7.99818,\n    \"MUR\": 37.80151,\n    \"MVR\": 15.451,\n    \"MWK\": 735.9364,\n    \"MXN\": 18.6494,\n    \"MYR\": 4.18231,\n    \"MZN\": 64.79825,\n    \"NAD\": 14.9805,\n    \"NGN\": 363.52,\n    \"NIO\": 33.70534,\n    \"NOK\": 9.3031,\n    \"NPR\": 114.13431,\n    \"NZD\": 1.57555,\n    \"OMR\": 0.38502,\n    \"PAB\": 0.99919,\n    \"PEN\": 3.38092,\n    \"PGK\": 3.40646,\n    \"PHP\": 50.71804,\n    \"PKR\": 154.11631,\n    \"PLN\": 3.9613,\n    \"PYG\": 6521.64205,\n    \"QAR\": 3.6412,\n    \"RON\": 4.42872,\n    \"RSD\": 108.8855,\n    \"RUB\": 63.7281,\n    \"RWF\": 950.17481,\n    \"SAR\": 3.75094,\n    \"SBD\": 8.23524,\n    \"SCR\": 13.70598,\n    \"SDG\": 52.7525,\n    \"SEK\": 9.8036,\n    \"SGD\": 1.4,\n    \"SLL\": 9720.5,\n    \"SOS\": 585.53,\n    \"SRD\": 7.45835,\n    \"SVC\": 8.74283,\n    \"SZL\": 14.93506,\n    \"THB\": 31.44455,\n    \"TJS\": 9.69119,\n    \"TMT\": 3.5,\n    \"TND\": 2.85165,\n    \"TOP\": 2.31662,\n    \"TRY\": 6.08567,\n    \"TTD\": 6.75088,\n    \"TWD\": 30.32302,\n    \"TZS\": 2309.815,\n    \"UAH\": 24.50375,\n    \"UGX\": 3662.2281,\n    \"USD\": 1,\n    \"UYU\": 37.89638,\n    \"UZS\": 9514.8477,\n    \"VND\": 23237.66,\n    \"XAF\": 607.31356,\n    \"XAG\": 0.054838090537687484,\n    \"XAU\": 0.0006214673465519438,\n    \"XCD\": 2.70269,\n    \"XLM\": 14.204545454545453,\n    \"XOF\": 607.31356,\n    \"XRP\": 3.663003663003663,\n    \"YER\": 250.3625,\n    \"ZAR\": 15.0978,\n    \"ZMW\": 14.66231\n  }\n}\n\nexport const getData = () => new Promise((resolve) => {\n  resolve(data)\n})","// @ts-nocheck\nimport React, { useEffect, useState } from 'react';\nimport { getData } from './data'\nimport './App.css';\n\nfunction App() {\n  const [ data, setData ] = useState({})\n\n  useEffect(() => {\n    getData().then(res => {\n      setData(res)\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"box\">\n        <h3>Rates:</h3>\n        {\n          data && data.rates && Object.entries(data.rates).map(([name, value]) => {\n            return <div className=\"row\" key={name}>\n              <div className=\"left\">{name}</div>\n              <div className=\"right\">{value}</div>\n            </div>\n          })\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}